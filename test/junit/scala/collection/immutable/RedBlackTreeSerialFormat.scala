package scala.collection.immutable

import org.junit.Assert._
import org.junit.Test

class RedBlackTreeSerialFormat {

  def write(o: AnyRef): Array[Byte] = {
    val ba = new java.io.ByteArrayOutputStream(512)
    val out = new java.io.ObjectOutputStream(ba)
    out.writeObject(o)
    out.close()
    ba.toByteArray()
  }

  def read(buffer: Array[Byte]): AnyRef = {
    val in =
      new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(buffer))
    in.readObject()
  }

  def parse(str: String) : Array[Byte] = {
    val b = Array.newBuilder[Byte]
    var i = 0
    while (i < str.length) {
      b += java.lang.Integer.parseInt(str.substring(i, i+2), 16).toByte
      i += 2
    }
    b.result()
  }

  def testParse(tree:AnyRef, shouldRoundTrip: Boolean, bin: String): Unit = {
    if (shouldRoundTrip) {
      val bytes = write(tree)
      val asString = s"${bytes.map(b => f"$b%02X").mkString}"
      assertEquals(bin, asString)
    }
    val recovered = read(parse(bin))
    assertEquals(tree, recovered)
  }


  val data = List.tabulate(10)(i => s"key$i" -> s"value:$i")
  val treeMap: TreeMap[String, String] = (TreeMap.newBuilder[String, String] ++= data).result()
  val treeSet: TreeSet[String] = (TreeSet.newBuilder[String] ++= data.map(_._1)).result()

  @Test def parseTreeMapBeforeMutableRedBlackTree {
    testParse(treeMap, false
  }
  @Test def parseTreeSetBeforeMutableRedBlackTree {
    testParse(treeSet, false
  }

  @Test def parseTreeMapAfterMutableRedBlackTree {
    testParse(treeMap, true
  }
  @Test def parseTreeSetAfterMutableRedBlackTree {
    testParse(treeSet, true
  }
}