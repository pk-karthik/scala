ill-nested-await.scala:16: error: await must not be used under a nested method.
    async { foo(0)(await(f(0))) }
                   ^
ill-nested-await.scala:21: error: await must not be used under a nested object.
    async { object Nested { await(f(false)) } }
                            ^
ill-nested-await.scala:26: error: await must not be used under a nested trait.
    async { trait Nested { await(f(false)) } }
                           ^
ill-nested-await.scala:31: error: await must not be used under a nested class.
    async { class Nested { await(f(false)) } }
                           ^
ill-nested-await.scala:36: error: await must not be used under a nested method.
    async { () => { await(f(false)) } }
                    ^
ill-nested-await.scala:41: error: await must not be used under a nested function.
    async { { case 0 => { await(f(false)) } } : PartialFunction[Int, Boolean] }
                          ^
ill-nested-await.scala:46: error: await must not be used under a try/catch.
    async { try { await(f(false)) } catch { case _: Throwable => } }
                  ^
ill-nested-await.scala:51: error: await must not be used under a try/catch.
    async { try { () } catch { case _: Throwable => await(f(false)) } }
                                                    ^
ill-nested-await.scala:56: error: await must not be used under a try/catch.
    async { try { () } finally { await(f(false)) } }
                                 ^
ill-nested-await.scala:61: error: await must not be used under a nested method.
    async { def foo = await(f(false)) }
                      ^
ill-nested-await.scala:70: error: await must not be used under a lazy val initializer.
    def foo(): Any = async { val x = { lazy val y = await(f(0)); y } }
                                                    ^
ill-nested-await.scala:76: error: await must not be used under a nested method.
    async { fooAsByNameLambda(await(f(""))) }
                              ^
ill-nested-await.scala:81: error: await must not be used under a synchronized call.
    async { lock.synchronized { await(f(1)) + await(f(2)) } }
                                ^
ill-nested-await.scala:81: error: await must not be used under a synchronized call.
    async { lock.synchronized { await(f(1)) + await(f(2)) } }
                                              ^
ill-nested-await.scala:10: error: `await` must be enclosed in an `async` block
     await[Any](f(null))
     ^
15 errors found
